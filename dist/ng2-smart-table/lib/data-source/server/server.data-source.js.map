{"version":3,"file":"server.data-source.js","sourceRoot":"","sources":["../../../../../src/ng2-smart-table/lib/data-source/server/server.data-source.ts"],"names":[],"mappings":"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","sourcesContent":["import { Http } from '@angular/http';\nimport { RequestOptionsArgs } from '@angular/http/src/interfaces';\nimport { URLSearchParams } from '@angular/http';\nimport { Observable } from 'rxjs';\n\nimport { LocalDataSource } from '../local/local.data-source';\nimport { ServerSourceConf } from './server-source.conf';\nimport { getDeepFromObject } from '../../helpers';\n\nimport 'rxjs/add/operator/toPromise';\n\nexport class ServerDataSource extends LocalDataSource {\n\n  protected conf: ServerSourceConf;\n\n  protected lastRequestCount: number = 0;\n\n  constructor(protected http: Http, conf: ServerSourceConf | {} = {}) {\n    super();\n\n    this.conf = new ServerSourceConf(conf);\n\n    if (!this.conf.endPoint) {\n      throw new Error('At least endPoint must be specified as a configuration of the server data source.');\n    }\n  }\n\n  count(): number {\n    return this.lastRequestCount;\n  }\n\n  getElements(): Promise<any> {\n    return this.requestElements().map(res => {\n      this.lastRequestCount = this.extractTotalFromResponse(res);\n      this.data = this.extractDataFromResponse(res);\n\n      return this.data;\n    }).toPromise();\n  }\n\n  /**\n   * Extracts array of data from server response\n   * @param res\n   * @returns {any}\n   */\n  protected extractDataFromResponse(res: any): Array<any> {\n    const rawData = res.json();\n    const data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;\n\n    if (data instanceof Array) {\n      return data;\n    }\n\n    throw new Error(`Data must be an array.\n    Please check that data extracted from the server response by the key '${this.conf.dataKey}' exists and is array.`);\n  }\n\n  /**\n   * Extracts total rows count from the server response\n   * Looks for the count in the heders first, then in the response body\n   * @param res\n   * @returns {any}\n   */\n  protected extractTotalFromResponse(res: any): number {\n    if (res.headers.has(this.conf.totalKey)) {\n      return +res.headers.get(this.conf.totalKey);\n    } else {\n      const rawData = res.json();\n      return getDeepFromObject(rawData, this.conf.totalKey, 0);\n    }\n  }\n\n  protected requestElements(): Observable<any> {\n    return this.http.get(this.conf.endPoint, this.createRequestOptions());\n  }\n\n  protected createRequestOptions(): RequestOptionsArgs {\n    let requestOptions: RequestOptionsArgs = {};\n    requestOptions.params = new URLSearchParams();\n\n    requestOptions = this.addSortRequestOptions(requestOptions);\n    requestOptions = this.addFilterRequestOptions(requestOptions);\n    return this.addPagerRequestOptions(requestOptions);\n  }\n\n  protected addSortRequestOptions(requestOptions: RequestOptionsArgs): RequestOptionsArgs {\n    const searchParams: URLSearchParams = <URLSearchParams>requestOptions.params;\n\n    if (this.sortConf) {\n      this.sortConf.forEach((fieldConf) => {\n        searchParams.set(this.conf.sortFieldKey, fieldConf.field);\n        searchParams.set(this.conf.sortDirKey, fieldConf.direction.toUpperCase());\n      });\n    }\n\n    return requestOptions;\n  }\n\n  protected addFilterRequestOptions(requestOptions: RequestOptionsArgs): RequestOptionsArgs {\n    const searchParams: URLSearchParams = <URLSearchParams>requestOptions.params;\n\n    if (this.filterConf.filters) {\n      this.filterConf.filters.forEach((fieldConf: any) => {\n        if (fieldConf['search']) {\n          searchParams.set(this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);\n        }\n      });\n    }\n\n    return requestOptions;\n  }\n\n  protected addPagerRequestOptions(requestOptions: RequestOptionsArgs): RequestOptionsArgs {\n    const searchParams: URLSearchParams = <URLSearchParams>requestOptions.params;\n\n    if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n      searchParams.set(this.conf.pagerPageKey, this.pagingConf['page']);\n      searchParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);\n    }\n\n    return requestOptions;\n  }\n}\n"]}